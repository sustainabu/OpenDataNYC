
# allows sorting within a dataframe
@render.ui()
def rows():
    rows = penguins_df.cell_selection()["rows"]  
    selected = ", ".join(str(i) for i in sorted(rows)) if rows else "None"
    return f"Rows selected: {selected}"

# allows for a data response

@render.code
def penguins_shape():
    data = penguins_df.data()  
    return data.shape


# Data Response responding to clicks
@render.code
def penguins_shape():
    data = penguins_df.data_view(selected=True)  
    return data.shape

@render.data_frame
def penguins_df():
    return render.DataGrid(penguins, selection_mode="rows")


# Set Size
@render.data_frame
def penguins_df():
    return render.DataGrid(penguins, width="300px", height="250px") 

# Set Table Styling
@render.data_frame
def penguins_df():
    return render.DataGrid(
        penguins.iloc[[0, 1, 200, 201, 300, 301], :],
        # penguins,
        styles=[  
            # Center the text of each cell (using Bootstrap utility class) 
            {  
                "class": "text-center",  
            },  
            # Bold the first column 
            {  
                "cols": [0],  
                "style": {"font-weight": "bold"},  
            },  
            # Highlight the penguin colors 
            {
                "rows": [0, 1],  
                "cols": [0],  
                "style": {"background-color": "#ffdbaf"},  
            },  
            {  
                "rows": [2, 3],  
                "cols": [0],  
                "style": {"background-color": "#b1d6d6"},  
            },  
            {  
                "rows": [4, 5],  
                "cols": [0],  
                "style": {"background-color": "#d6a9f2"},  
            },  
        ],  
    )

# You can change plot view
# https://shiny.posit.co/py/docs/jupyter-widgets.html

#Place two tables side by side

#Python Interactive Map
import pydeck as pdk
import shiny.express
from shinywidgets import render_pydeck

@render_pydeck
def map():
    UK_ACCIDENTS_DATA = "https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv"

    layer = pdk.Layer(
        "HexagonLayer",  # `type` positional argument is here
        UK_ACCIDENTS_DATA,
        get_position=["lng", "lat"],
        auto_highlight=True,
        elevation_scale=50,
        pickable=True,
        elevation_range=[0, 3000],
        extruded=True,
        coverage=1,
    )

    # Set the viewport location
    view_state = pdk.ViewState(
        longitude=-1.415,
        latitude=52.2323,
        zoom=6,
        min_zoom=5,
        max_zoom=15,
        pitch=40.5,
        bearing=-27.36,
    )

    # Combined all of it and render a viewport
    return pdk.Deck(layers=[layer], initial_view_state=view_state)

# Multi Pages is possible

ui.page_opts(title="Multi-page example", fillable=True)

with ui.sidebar():
    ui.input_select("var", "Select variable", choices=["total_bill", "tip"])

with ui.nav_panel("Plot"):
    @render_widget
    def hist():
        return px.histogram(px.data.tips(), input.var())

with ui.nav_panel("Table"):
    @render.data_frame
    def table():
        return px.data.tips()


#multi-Panel

ui.page_opts(title="Multi-tab example", fillable=True)

with ui.sidebar():
    ui.input_select("var", "Select variable", choices=["total_bill", "tip"])

with ui.navset_card_underline(title="Penguins"):
    with ui.nav_panel("Plot"):
        @render_widget
        def hist():
            return px.histogram(px.data.tips(), input.var())

    with ui.nav_panel("Table"):
        @render.data_frame
        def table():
            return px.data.tips()


#Multi- Column Example
https://shiny.posit.co/py/docs/overview.html

# Shiny only loads what is selected 


# Set Interactive Map Locations
from shiny import reactive
from shiny.express import input, ui
from shinywidgets import render_widget
import ipyleaflet as ipyl

city_centers = {
    "London": (51.5074, 0.1278),
    "Paris": (48.8566, 2.3522),
    "New York": (40.7128, -74.0060)
}

ui.input_select("center", "Center", choices=list(city_centers.keys()))

@render_widget
def map():
    return ipyl.Map(zoom=4)

@reactive.effect
def _():
    map.widget.center = city_centers[input.center()]

# Interactive 