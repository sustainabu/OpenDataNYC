from dash import Dash, html, dcc, callback, Output, Input
from datetime import date
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go
import folium

# Load data
df = pd.read_csv(
    "https://raw.githubusercontent.com/sustainabu/OpenDataNYC/refs/heads/main/311_BlockedBikeLane/dfc_out.csv"
)

# Data type adjustments
df["dateTime"] = pd.to_datetime(df["dateTime"]).dt.date
df["index_"] = df["index_"].astype(int)
df["MinutesElapsed"] = df["MinutesElapsed"].astype(float)

# Dropdown options
board_options = ["All"] + sorted(df["cboard_expand"].dropna().unique().astype(str))

app = Dash(__name__, suppress_callback_exceptions=True)
server = app.server

app.title = "311 Blocked Bike Lane Dashboard"
update_date = date(2024, 12, 31)

# App layout
app.layout = html.Div([
    dcc.Tabs(id='tabs-nav', value='tab-1', children=[
        dcc.Tab(label='Discovery Mode', value='tab-1'),
        dcc.Tab(label='About', value='tab-2'),
    ]),
    html.Div(id='tabs-content'),
])

# Callback to render tab content
@app.callback(
    Output('tabs-content', 'children'),
    Input('tabs-nav', 'value')
)
def render_content(tab):
    if tab == 'tab-1':
        return html.Div([
            dcc.Markdown("Each record is a 311 request for Blocked Bike Lane Violation. The dashboard displays NYPD responses, response-time, and call-density."),
            html.Div([
                dcc.Markdown("### Select Parameters")
            ], style={'padding': 10}),

            # Start and End Date Pickers
            html.Div([
                html.Div([
                    dcc.Markdown('''
                        **Start Date**
                        '''
                    ),
                    dcc.DatePickerSingle(
                        id='start-date',
                        min_date_allowed=date(2021, 1, 1),
                        max_date_allowed=update_date,
                        initial_visible_month=date(2023, 1, 1),
                        date=date(2023, 1, 1),
                        placeholder='Select Start Date'
                    ),
                ], style={'margin-right': '20px'}),

                html.Div([
                    html.H4("End Date"),
                    dcc.DatePickerSingle(
                        id='end-date',
                        min_date_allowed=date(2021, 1, 1),
                        max_date_allowed=update_date,
                        initial_visible_month=update_date,
                        date=update_date,
                        placeholder='Select End Date'
                    ),
                ], style={'margin-right': '20px'}),
            ], style={'display': 'flex', 'flex-direction': 'row', 'margin-bottom': '20px'}),

            # Dropdown for Board Selection
            html.Div([
                html.H4("Select Community Board"),
                dcc.Dropdown(board_options, value="All", id="dropdown", style={'margin-bottom': 20})
            ]),
            # Bar
            html.Div([
                dcc.Graph(id="bar", config={'displayModeBar': False})
            ]),
        ], style={'width': '80%', 'margin': 'auto'})

    elif tab == 'tab-2':
        return html.Div([
            html.Div([
                dcc.Markdown("## About", style={'textAlign': 'center'}),
            ], style={'padding': 10}),

            html.Div([
                dcc.Markdown("""
                    ### Motivation:
                    Explore and analyze NYC blocked bike lane reports.
                """, style={'padding': 10}),
            ]),
        ], style={'width': '80%', 'margin': 'auto'})

=


@callback(
    Output("bar", "figure"),
    [Input('start-date', 'date'), 
     Input('end-date', 'date'), 
     Input("dropdown", "value")
     #,Input("radio", "value")
     ]
)
def bar_graph(start_date, end_date, value):
    # Filter by board selection
    filtered_df = df[df["cboard_expand"] == value] if value != "All" else df

    # Filter by date range
    filtered_df = filtered_df[
        (filtered_df["dateTime"] >= pd.to_datetime(start_date).date()) &
        (filtered_df["dateTime"] <= pd.to_datetime(end_date).date())
    ]

    # Filter by Radio Button
    #filtered_df = filtered_df.query('MinutesElapsed==MaxR_Mins and RepeatBin!="1"') if choice != "request" else filtered_df

    # Shortcut Renaming
    def valueT():
        if value != "All":
            return value.split(':')[0]
        else:
            return "All"

    # Predefined resolution categories and elapsed minute bins    
    all_resolutions = ["Action", "Late", "No-Action", "Summon"]  # Add all possible resolution values here
    elapsed_bins = ["min0->5", "min5->30", "min30->60", "min60->360", "min360+"]  # Define all bins

    # Step 1: Aggregate Total, Median, and Mean
    cols_total = ["resolution", "index_"]
    cols_elapsed = ["resolution", "MinutesElapsed"]

    # Total count with predefined categories
    df_total = filtered_df[cols_total].groupby("resolution", observed=False).sum()
    df_total = df_total.reindex(all_resolutions, fill_value=0).reset_index()
    df_total.columns = ["resolution", "Total"]

    # Median of MinutesElapsed
    df_median = filtered_df[cols_elapsed].groupby("resolution", observed=False).median()
    df_median = df_median.reindex(all_resolutions, fill_value=0).reset_index()
    df_median = df_median.round(2)
    df_median.columns = ["resolution", "Median_Minutes"]

    # Mean of MinutesElapsed
    df_mean = filtered_df[cols_elapsed].groupby("resolution", observed=False).mean()
    df_mean = df_mean.reindex(all_resolutions, fill_value=0).reset_index()
    df_mean = df_mean.round(2)
    df_mean.columns = ["resolution", "Mean_Minutes"]

    # Merge Total, Median, and Mean
    merged_df = pd.merge(df_total, df_median, on="resolution", how="left")
    merged_df = pd.merge(merged_df, df_mean, on="resolution", how="left")

    # Step 2: Create Binned Count with all bins included
    bins_cols = ["resolution", "ElapsedMinuteBin", "index_"]

    # Group and pivot with predefined bins
    df_bins = filtered_df[bins_cols].groupby(["resolution", "ElapsedMinuteBin"]).sum().reset_index()
    df_bins["ElapsedMinuteBin"] = pd.Categorical(df_bins["ElapsedMinuteBin"], categories=elapsed_bins, ordered=True)
    df_bins = df_bins.pivot_table(index="resolution", columns="ElapsedMinuteBin", values="index_", fill_value=0).reset_index()

    # Ensure all bins are included
    df_bins = df_bins.reindex(columns=["resolution"] + elapsed_bins, fill_value=0)

    # Merge binned data with aggregated data
    result_df = pd.merge(merged_df, df_bins, on="resolution", how="left")
    result_df.columns = ["Police_resolution", "Total", "Median_Mins", "Mean_Mins"] + elapsed_bins
    new_order = [1,2,0,3]
    result_df = result_df.reindex(new_order)

    # Step 3: Add Citywide Totals
    city_data = [
        "All_resolutions",
        result_df["Total"].sum(),
        round(filtered_df["MinutesElapsed"].median(), 2),
        round(filtered_df["MinutesElapsed"].mean(), 2),
        *[result_df[bin].sum() for bin in elapsed_bins],
    ]

    citywide_df = pd.DataFrame([city_data], columns=result_df.columns)

    # Combine aggregated data with citywide totals
    final_df = pd.concat([result_df, citywide_df], ignore_index=True)

    # Step 4: Calculate percentages for binned columns
    for col in elapsed_bins:
        final_df[col] = (
            final_df[col]
            .div(final_df["Total"])
            .fillna(0)
            .mul(100)
            .apply(lambda x: f"{x:.1f}%")
        )



## horizontal graph
    fig = go.Figure()
    fig.add_trace(go.Bar(
        y=final_df["Police_resolution"],
        x=final_df['min0->5'],
        name='Min_0->5',
        orientation='h',
        #marker=dict(color='#19A0AA'),
        #text=male_percentages,
        #textfont_size=14,
        textposition='inside',  # Position the text inside the bars
    ))

    fig.add_trace(go.Bar(
        y=final_df["Police_resolution"],
        x=final_df['min5->30'],
        name='Min_5->30',
        orientation='h',
        textposition='inside',  # Position the text inside the bars
    ))

    fig.add_trace(go.Bar(
        y=final_df["Police_resolution"],
        x=final_df['min30->60'],
        name='Min_30->60',
        orientation='h',
        textposition='inside',  # Position the text inside the bars
    ))
    fig.add_trace(go.Bar(
        y=final_df["Police_resolution"],
        x=final_df['min60->360'],
        name='Min_60->360',
        orientation='h',
        textposition='inside',  # Position the text inside the bars
    ))
    fig.add_trace(go.Bar(
        y=final_df["Police_resolution"],
        x=final_df['min360+'],
        name='Min_360+',
        orientation='h',
        textposition='inside',  # Position the text inside the bars
    ))

    quarters = ['All_resolutions','Summon','Action','No-Action','Late']

    fig.update_layout(
        xaxis=dict(ticksuffix='%'),
        yaxis=dict(categoryorder='array', categoryarray=quarters),
        barmode='stack',
        template='plotly_white',
        legend=dict(
            orientation='h',  # Horizontal legend
            yanchor='bottom',
            y=-0.25,  # Position below the chart
            xanchor='center',
            x=0.5,  # Centered horizontally
            traceorder='normal'
        ),
        margin = dict(l=10, r=10, t=10, b=10),
    )
    return fig


#Folium Maps


#Callback for Folium Map
@callback(
    Output("folium", "srcDoc"),
    [Input('start-date', 'date'), 
     Input('end-date', 'date'), 
     Input("dropdown", "value"),
     Input("slider", "value"),
     Input("radio4", "value")
     ]
)
def folium_map(start_date, end_date, value, slide, choice):
    # Select only unique values
    dfc_unique= df.query('MinutesElapsed==MaxR_Mins')

    # Filter by board selection
    filtered_df = dfc_unique[dfc_unique["cboard_expand"] == value] if value != "All" else df

    # Filter by date range
    filtered_df = filtered_df[
        (filtered_df["dateTime"] >= pd.to_datetime(start_date).date()) &
        (filtered_df["dateTime"] <= pd.to_datetime(end_date).date())
    ]

    # Calculate midpoint of latitude and longitude
    latitude_mid = (filtered_df.latitude.max() + filtered_df.latitude.min()) / 2
    longitude_mid = (filtered_df.longitude.max() + filtered_df.longitude.min()) / 2
    
    # Set default map location and zoom based on input
    if value == "All":
        zoom = 11.25
        map_location = [40.7128, -74.0060]  # Default NYC location
    else:
        zoom = 12.5
        map_location = [latitude_mid, longitude_mid]

    # Initialize folium map
    nyc_map = folium.Map(location=map_location, zoom_start=zoom, tiles="CartoDB positron", height='100%', control_scale=True)


    # Get Total by UAddress
    p=['incident_address','cboard', 'precinct','UAdd','longitude','latitude','index_']
    df1=filtered_df[p].groupby(['incident_address','cboard','precinct','UAdd','longitude','latitude']).sum().reset_index()
    df1.columns=['Address','cboard','precinct','UAdd','longitude','latitude','total']

    # Filter data based on input
    df1 = df1[df1['total'] > slide]

    # Get Elapsed Min Binned Count
    p2=['UAdd','ElapsedMinuteBin','index_']
    pv=filtered_df[p2].groupby(['UAdd','ElapsedMinuteBin']).sum().reset_index()
    pv2=pd.pivot_table(pv,index='UAdd', columns='ElapsedMinuteBin', values=['index_']).reset_index().fillna(0)

    #CHECK ORDER OF COLUMNS- Alphabetical
    pv2.columns=['UAdd',"min0->5", "min30->60", "min360+", "min5->30","min60->360"]  
    c1= pd.merge(df1, pv2, on='UAdd', how='right')

    # Get Resolution Count
    p2=['UAdd','resolution','index_']
    cv=filtered_df[p2].groupby(['UAdd','resolution']).sum().reset_index()
    cv2=pd.pivot_table(cv,index='UAdd', columns='resolution', values=['index_']).reset_index().fillna(0)

    #CHECK ORDER OF COLUMNS- Alphabetical
    cv2.columns=['UAdd','NYPD_Action','NYPD_Late','NYPD_No-Action','NYPD_Summon']
    B= pd.merge(c1, cv2, on='UAdd', how='right')

    # to get median
    p2=['UAdd','MinutesElapsed']
    C=filtered_df[p2].groupby(['UAdd']).median().reset_index()
    C.columns= ['UAdd','Median_Minutes']  
    C.Median_Minutes=round(C.Median_Minutes,2)
    D= pd.merge(B, C, on='UAdd', how='right') 
    # to get mean
    E=filtered_df[p2].groupby(['UAdd']).mean().reset_index()
    E.columns= ['UAdd','Mean_Minutes']  
    E.Mean_Minutes=round(E.Mean_Minutes,2)
    F= pd.merge(D, E, on='UAdd', how='right') 

    F['InAction_Rate']= round((F['NYPD_Late'] +F['NYPD_No-Action']) / F['total'],2)

   # B17= F.query('total>50').sort_values('Median_Minutes', ascending=False)

    def Resp(x):
        if x<=30:
            return "Low" #5 mins or less
        elif x>30 and x<=60:
            return "Medium"
        else:
            return "High" # greater than 360 mins
    

    F=F.copy()
    F['Time_rank'] = F['Median_Minutes'].apply(Resp)

    def Resp(x):
        if x<=0.5:
            return "Low" #5 mins or less
        elif x>0.5 and x<=0.75:
            return "Medium"
        else:
            return "High" # greater than 360 mins
            
    F = F.copy()
    F['Inaction_rank'] = F['InAction_Rate'].apply(Resp)

    if choice == 'Response':
        categories = [
            ("Inaction_rank == 'Low'", "#007849"),  # Green
            ("Inaction_rank == 'Medium'", "#FFB52E"),  # Orange
            ("Inaction_rank == 'High'", "#E32227")  # Red
        ]
        # Add markers to the map
        for query, color in categories:
            category_df = F.query(query)
            for _, row in category_df.iterrows():
                popup_text = (
                    f"Address: {row['incident_address']}<br>"
                    f"Total: {row['index_']}<br>"
                    f"InAction Rate: {row['InAction_Rate']}<br>"
                    f"Late#: {row['Late']}<br>"
                    f"No-Action#: {row['No-Action']}<br>"
                    f"Action#: {row['Action']}<br>"
                    f"Summon#: {row['Summon']}"
                )
                folium.CircleMarker(
                    location=(row["latitude"], row["longitude"]),
                    radius=row['index_'] / 15 + 3,
                    color=color,
                    popup = folium.Popup(popup_text, max_width=300),
                    fill=True
                ).add_to(nyc_map)
    else:
        # Define marker categories
        categories = [
            ("Time_rank == 'Low'", "#007849"),  # Green
            ("Time_rank == 'Medium'", "#FFB52E"),  # Orange
            ("Time_rank == 'High'", "#E32227")  # Red
        ]

        # Add markers to the map
        for query, color in categories:
            category_df = F.query(query)
            for _, row in F.iterrows():
                popup_text = (
                    f"Address: {row['incident_address']}<br>"
                    f"Total: {row['index_']}<br>"
                    f"MedianMin: {row['MedianResponse_Minutes']}<br>"
                    f"MeanMin: {row['MeanResponse_Minutes']}<br>"
                    f"Min_0->5: {row['min0->5']}<br>"
                    f"Min_5->30: {row['min5->30']}<br>"
                    f"Min_30->60: {row['min30->60']}<br>"
                    f"Min_60->360: {row['min60->360']}<br>"
                    f"Min_360+: {row['min360+']}<br>"
                )
                folium.CircleMarker(
                    location=(row["latitude"], row["longitude"]),
                    radius=row['index_'] / 15 + 3,
                    color=color,
                    popup = folium.Popup(popup_text, max_width=300),
                    fill=True
                ).add_to(nyc_map)
    return nyc_map._repr_html_()


# Run the app
if __name__ == "__main__":
    app.run_server(debug=True)
